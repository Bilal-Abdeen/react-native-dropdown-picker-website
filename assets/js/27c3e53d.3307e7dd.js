"use strict";(self.webpackChunkreact_native_dropdown_picker_docs=self.webpackChunkreact_native_dropdown_picker_docs||[]).push([[4095],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),p=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,y=d["".concat(a,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(y,c(c({ref:t},l),{},{components:n})):r.createElement(y,c({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var p=2;p<i;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5664:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),c=["components"],s={id:"close-other-pickers",title:"Close other pickers"},a=void 0,p={unversionedId:"tutorials/close-other-pickers",id:"version-5.1/tutorials/close-other-pickers",title:"Close other pickers",description:"As a rule, all other pickers should be closed when another picker opens.",source:"@site/versioned_docs/version-5.1/tutorials/close-other-pickers.md",sourceDirName:"tutorials",slug:"/tutorials/close-other-pickers",permalink:"/react-native-dropdown-picker-website/docs/5.1/tutorials/close-other-pickers",editUrl:"https://hossein-zare.github.io/react-native-dropdown-picker-website/versioned_docs/version-5.1/tutorials/close-other-pickers.md",tags:[],version:"5.1",frontMatter:{id:"close-other-pickers",title:"Close other pickers"},sidebar:"version-5.1/someSidebar",previous:{title:"Themes",permalink:"/react-native-dropdown-picker-website/docs/5.1/advanced/themes"},next:{title:"Multiple Pickers",permalink:"/react-native-dropdown-picker-website/docs/5.1/tutorials/multiple-pickers"}},l=[],u={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As a rule, all other pickers should be closed when another picker opens.",(0,i.kt)("br",{parentName:"p"}),"\n","In the following example, two state variables are defined for country and city pickers. When the country picker opens, the city picker closes, and the same happens inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"onOpen")," callback of the city picker."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const [countryOpen, setCountryOpen] = useState(false);\n  const [cityOpen, setCityOpen] = useState(false);\n\n  const onCountryOpen = useCallback(() => {\n    setCityOpen(false);\n  }, []);\n\n  const onCityOpen = useCallback(() => {\n    setCountryOpen(false);\n  }, []);\n\n  return (\n    // Country\n    <DropDownPicker\n      open={countryOpen}\n      onOpen={onCountryOpen}\n      ...\n    />\n\n    // City\n    <DropDownPicker\n      open={cityOpen}\n      onOpen={onCityOpen}\n      ...\n    />\n  );\n}\n")))}d.isMDXComponent=!0}}]);